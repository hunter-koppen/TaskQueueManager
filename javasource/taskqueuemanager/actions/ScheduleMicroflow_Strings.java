// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package taskqueuemanager.actions;

import java.util.LinkedHashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * Execute a microflow at a specific DateTime. Possible 2 string parameters.
 */
public class ScheduleMicroflow_Strings extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String Microflow;
	private java.lang.String TaskQueueName;
	private java.util.Date ExecuteAt;
	private java.lang.String Arg1Name;
	private java.lang.String Arg1Value;
	private java.lang.String Arg2Name;
	private java.lang.String Arg2Value;

	public ScheduleMicroflow_Strings(IContext context, java.lang.String Microflow, java.lang.String TaskQueueName, java.util.Date ExecuteAt, java.lang.String Arg1Name, java.lang.String Arg1Value, java.lang.String Arg2Name, java.lang.String Arg2Value)
	{
		super(context);
		this.Microflow = Microflow;
		this.TaskQueueName = TaskQueueName;
		this.ExecuteAt = ExecuteAt;
		this.Arg1Name = Arg1Name;
		this.Arg1Value = Arg1Value;
		this.Arg2Name = Arg2Name;
		this.Arg2Value = Arg2Value;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext context = getContext();

		if (this.Microflow == null) {
			throw new Exception("Error trying to schedule microflow: No Microflow selected");
		}

		if (!Core.getMicroflowNames().contains(this.Microflow)) {
			throw new Exception("Error trying to schedule microflow: Microflow not found " + this.Microflow);
		}

		Map<String, Object> params = new LinkedHashMap<String, Object>();

		if (this.Arg1Name != null && this.Arg1Value != null) {
			params.put(this.Arg1Name, this.Arg1Value);
		}

		if (this.Arg2Name != null && this.Arg2Value != null) {
			params.put(this.Arg2Name, this.Arg2Value);
		}

		Core.microflowCall(this.Microflow).withParams(params).executeInBackground(context, TaskQueueName, ExecuteAt);

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ScheduleMicroflow_Strings";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
